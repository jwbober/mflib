The file should start with the 32 bit unsigned integer 3229261 (ascii string "MF1\0".

This is followed by

struct mfheader {
    uint32_t level;
    uint32_t weight;
    uint32_t chi;
    uint32_t orbit;
    uint32_t j;
    uint32_t prec;
    uint32_t ncoeffs;
};

Provided that this struct is completely packed. To be safe, I suppose it should
be read or written an entry at a time, though in practice I imagine that's not
necessary. So you might use

int write_mfheader(FILE * outfile, struct mfheader * header) {
    if(!fwrite((char*)&header->level, sizeof(header->level), 1, outfile)) return 0;
    if(!fwrite((char*)&header->weight, sizeof(header->weight), 1, outfile)) return 0;
    if(!fwrite((char*)&header->chi, sizeof(header->chi), 1, outfile)) return 0;
    if(!fwrite((char*)&header->orbit, sizeof(header->orbit), 1, outfile)) return 0;
    if(!fwrite((char*)&header->j, sizeof(header->j), 1, outfile)) return 0;
    if(!fwrite((char*)&header->prec, sizeof(header->prec), 1, outfile)) return 0;
    if(!fwrite((char*)&header->ncoeffs, sizeof(header->ncoeffs), 1, outfile)) return 0;
    return 1;
}

and

int read_mfheader(FILE * infile, struct mfheader * header) {
    if(!fread((char*)&header->level, sizeof(header->level), 1, infile)) return 0;
    if(!fread((char*)&header->weight, sizeof(header->weight), 1, infile)) return 0;
    if(!fread((char*)&header->chi, sizeof(header->chi), 1, infile)) return 0;
    if(!fread((char*)&header->orbit, sizeof(header->orbit), 1, infile)) return 0;
    if(!fread((char*)&header->j, sizeof(header->j), 1, infile)) return 0;
    if(!fread((char*)&header->prec, sizeof(header->prec), 1, infile)) return 0;
    if(!fread((char*)&header->ncoeffs, sizeof(header->ncoeffs), 1, infile)) return 0;
    return 1;
}

(Everything is little-endian, I suppose, since I'm always on x86.)

The orbit may be zero, indicating that there is no orbit information.
Otherwise it is a positive number. j is a number between 0 and d-1, where d
is either the dimension of the orbit or of the full space.

This header is followed by

DATA:
If chi == 1: M integers, output using fmpz_out_raw(). readable by fmpz_inp_raw(),
corresponding to the coeffcients of the modular form.

If chi != 1: 2M integers, output using fmpz_out_raw(). readable by fmpz_inp_raw(),
each pair corresponding to the real and imaginary parts of the coefficients.

If prec == 2^32 - 1, then each integer x is exact. Otherwise, each integer x
represents the interval x*2^{-prec} +/- 2^{-prec}.

The first coeffcient in each file will be a 1. (Or a small interval containing 1.)
