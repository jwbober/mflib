See also mfformat.h and cat-binary-format.c for examples.

Each file should start with

struct mfheader {
    uint32_t version; // == 3229261 (ascii string "MF1\0")
    uint32_t level;
    uint32_t weight;
    uint32_t chi;
    uint32_t orbit;
    uint32_t j;
    int32_t prec;
    int32_t exponent;
    uint32_t ncoeffs;
    char reserved[92];
}; // For a grand total of 128 bytes, since that is a nice round number.

provided that this struct has no padding. To be safe, I suppose it should be
read or written an entry at a time. (Though in practice I imagine that's not
necessary.) So you might use

int write_mfheader(FILE * outfile, struct mfheader * header) {
    if(!fwrite((char*)&header->version, sizeof(header->version), 1, outfile)) return 0;
    if(!fwrite((char*)&header->level, sizeof(header->level), 1, outfile)) return 0;
    if(!fwrite((char*)&header->weight, sizeof(header->weight), 1, outfile)) return 0;
    if(!fwrite((char*)&header->chi, sizeof(header->chi), 1, outfile)) return 0;
    if(!fwrite((char*)&header->orbit, sizeof(header->orbit), 1, outfile)) return 0;
    if(!fwrite((char*)&header->j, sizeof(header->j), 1, outfile)) return 0;
    if(!fwrite((char*)&header->prec, sizeof(header->prec), 1, outfile)) return 0;
    if(!fwrite((char*)&header->exponent, sizeof(header->exponent), 1, outfile)) return 0;
    if(!fwrite((char*)&header->ncoeffs, sizeof(header->ncoeffs), 1, outfile)) return 0;
    if(!fwrite((char*)&header->reserved, sizeof(header->reserved), 1, outfile)) return 0;
    return 1;
}

and

int read_mfheader(FILE * outfile, struct mfheader * header) {
    if(!fread((char*)&header->version, sizeof(header->version), 1, outfile)) return 0;
    if(header->version != 3229261) return 0;
    if(!fread((char*)&header->level, sizeof(header->level), 1, outfile)) return 0;
    if(!fread((char*)&header->weight, sizeof(header->weight), 1, outfile)) return 0;
    if(!fread((char*)&header->chi, sizeof(header->chi), 1, outfile)) return 0;
    if(!fread((char*)&header->orbit, sizeof(header->orbit), 1, outfile)) return 0;
    if(!fread((char*)&header->j, sizeof(header->j), 1, outfile)) return 0;
    if(!fread((char*)&header->prec, sizeof(header->prec), 1, outfile)) return 0;
    if(!fread((char*)&header->exponent, sizeof(header->exponent), 1, outfile)) return 0;
    if(!fread((char*)&header->ncoeffs, sizeof(header->ncoeffs), 1, outfile)) return 0;
    if(!fread((char*)&header->reserved, sizeof(header->reserved), 1, outfile)) return 0;
    return 1;
}

(Everything is little-endian, I suppose, since I'm always on x86.)

The orbit may be zero, indicating that there is no orbit information.
Otherwise it is a positive number. j is a number between 0 and d-1, where d is
either the dimension of the orbit or of the full space.

This header is followed by coefficient data. The data come in (real,imaginary)
pairs for nontrivial characters, but for the trivial character only the real
part is included (since the imaginary part is always zero). Each entry is an
integer x, say, which is the output of fmpz_out_raw(), so can be read by
fmpz_inp_raw(). The actual (real or imaginary) part is then the interval x *
2^exponent +/- 2^prec, unless prec == 2^31 - 1, in which case x*2^exponent is
exact.

There will be 2*ncoeffs worth of data if chi is nontrivial (to be read in with
2*ncoeffs calls to fmpz_inp_raw), or ncoeffs worth of data if chi is trivial.

The first coefficient in each file will be a 1, since these are all newforms.
(Technically it is a small interval around 1, but it can be assumed to be
exact.)

Perhaps I'm being silly with the extra reserved space. It's there to maybe
minimize headaches in case of additions to the header. One possible planned
change is to sometimes specify coefficients as exact quadratic algebraic
integers, but that's going to require a version change anyway. Anyway, it's
a very small amount of wasted space, percentagewise.
